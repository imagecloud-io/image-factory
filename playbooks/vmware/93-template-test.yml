---
- name: Deploy templates on vmware for testing
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    template_candidate: "candidate"

  pre_tasks:
    - name: Set base variables
      set_fact:
        base_dir: "{{ lookup('pipe', 'git rev-parse --show-toplevel') }}"
        cloud_type: "{{ cloud_env[cloud].type }}"

    - name: Get list of VMs
      vmware_vm_facts:
        hostname: "{{ cloud_env[cloud].vcenter.host }}"
        username: "{{ cloud_env[cloud].vcenter.username }}"
        password: "{{ cloud_env[cloud].vcenter.password }}"
        validate_certs: no
      register: _vm_list

    - name: Set list of virtual machine
      set_fact:
        vm_list: "{{ _vm_list.virtual_machines }}"

    - name: Build template list
      set_fact:
        template_list: "{{ template_list | default([]) + [ item ]  }}"
      when: item is search(template + '-' + template_candidate + '-')
      with_items:
        - "{{ vm_list.keys() }}"

    - name: Find newest template by epoch time stamp
      set_fact:
        newest_template: "{{ (template_list|default([])|sort)[-1] }}"
      when: template_list|default([])

    - name: Fail when no templates have been found
      fail:
        msg: There are no matching templates. We should not have come this far.
      when: template_list is not defined

  roles:
    - role: imagecloud-vm-ops
      cloud_params: "{{ cloud_env[cloud] }}"
      cloud_password: "{{ secrets[cloud].vcenter.password }}"
      source_vm: "{{ newest_template }}"
      source_folder: "{{ cloud_env[cloud].build_folder }}"
      destination_vm: "{{ 'test-' + newest_template }}"
      destination_folder: "{{ cloud_env[cloud].build_folder }}"
      action: clone

    - role: imagecloud-vm-ops
      cloud_params: "{{ cloud_env[cloud] }}"
      cloud_password: "{{ secrets[cloud].vcenter.password }}"
      source_vm: "{{ 'test-' + newest_template }}"
      source_folder: "{{ cloud_env[cloud].build_folder }}"
      action: poweron

  post_tasks:

    - name: Wait for real IP address for "{{ 'test-' + newest_template }}"
      vmware_guest_facts:
        hostname: "{{ cloud_env[cloud].vcenter.host }}"
        username: "{{ cloud_env[cloud].vcenter.username }}"
        password: "{{ cloud_env[cloud].vcenter.password }}"
        validate_certs: "{{ cloud_env[cloud].vcenter.validate_certs }}"
        datacenter: "{{ cloud_env[cloud].vcenter.datacenter }}"
        folder: "/{{ cloud_env[cloud].vcenter.datacenter }}/vm/{{ cloud_env[cloud].build_folder }}"
        name: "{{ 'test-' + newest_template }}"
      register: vm_facts
      ignore_errors: true
      retries: 1000
      until: vm_facts.instance.ipv4|default("0.0.0.0", True) != "0.0.0.0" and not vm_facts.instance.ipv4|default("0.0.0.0", True) is match("169\.254\.*")

    - name: Add Windows VM to inventory
      add_host:
        name: "{{ 'test-' + newest_template }}"
        ansible_host: "{{ vm_facts.instance.ipv4 }}"
        ansible_user: "{{ base_templates.vmware[ template ].admin_user }}"
        ansible_password: "{{ base_templates.vmware[ template ].admin_password }}"
        ansible_port: 5986
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_operation_timeout_sec: 120
        ansible_winrm_read_timeout_sec: 150
        groups: vm_stager
      no_log: true
      when: vm_facts.instance.hw_guest_id is match("windows*")

    - name: Add Linux VM to inventory
      add_host:
        name: "{{ 'test-' + newest_template }}"
        ansible_host: "{{ vm_facts.instance.ipv4 }}"
        ansible_user: "{{ base_templates.vmware[ template ].admin_user }}"
        ansible_password: "{{ secrets.template.password }}"
        ansible_become: yes
        groups: vm_stager
      no_log: true
      when: not vm_facts.instance.hw_guest_id is match("windows*")

- name: Test VM against security baseline
  hosts: vm_stager
  gather_facts: true

  roles:
    - role: imagecloud-sec-baseline
      admin_user: "{{ base_templates.vmware[ template ].admin_user }}"
      admin_password: "{{ secrets.template.password }}"
      register: baseline_failed

  post_tasks:
    - name: Make sure baseline result is not forgotten
      set_fact:
        baseline_compliant: "{{ not baseline_failed }}"
      delegate_to: localhost
      delegate_facts: yes

    - name: Issue shutdown command
      win_command: shutdown /s /t 1 /f /d p:4:1 /c Done
      when: ansible_os_family == "Windows"

    - name: Issue shutdown command
      command: /usr/sbin/shutdown -h +1
      when: ansible_os_family in [ "RedHat", "Debian", "Ubuntu" ]

- name: Really shutdown VMs
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Wait for poweroff
      include_role:
        name: imagecloud-vm-ops
      vars:
        cloud_params: "{{ cloud_env[cloud] }}"
        cloud_password: "{{ secrets[cloud].vcenter.password }}"
        source_vm: "{{ 'test-' + newest_template }}"
        source_folder: "{{ cloud_env[cloud].build_folder }}"
        action: wait_poweredoff

    - name: Destroy test VM
      include_role:
        name: imagecloud-vm-ops
      vars:
        cloud_params: "{{ cloud_env[cloud] }}"
        cloud_password: "{{ secrets[cloud].vcenter.password }}"
        source_vm: "{{ 'test-' + newest_template }}"
        source_folder: "{{ cloud_env[cloud].build_folder }}"
        action: destroy

    - block:
      - name: Destroy failed template
        include_role:
          name: imagecloud-vm-ops
        vars:
          cloud_params: "{{ cloud_env[cloud] }}"
          cloud_password: "{{ secrets[cloud].vcenter.password }}"
          source_vm: "{{ newest_template }}"
          source_folder: "{{ cloud_env[cloud].build_folder }}"
          action: destroy

      - name: Give final message
        fail:
          msg: Template does not comply with hardening requirements. It has been deleted.

      when: not baseline_compliant

    - name: Give final message
      debug:
        msg: Template complies with hardening requirements.
      when: baseline_compliant
